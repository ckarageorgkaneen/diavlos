#!/usr/bin/env python3
import logging
import json
import pickle
import requests

logging.basicConfig()
logger = logging.getLogger('fetch_govgr_services')
logger.setLevel(level=logging.DEBUG)

# Endpoints
GOVGR_SERVICES_ENDPOINT = 'https://www.gov.gr/api/v1/services/'
GOVGR_LIFE_EVENTS_ENDPOINT = 'https://www.gov.gr/api/v1/subcategories/'
GOVGR_USEFUL_LINKS_ENDPOINT = 'https://www.gov.gr/api/v1/service-useful-links/'
# Keys
NAME_KEY = 'name'
TITLE_KEY = 'title'
URL_KEY = 'url'
ID_KEY = 'id'
FIELDS_KEY = 'fields'
DESCRIPTION_KEY = 'description'
IS_G2C_KEY = 'is_g2c'
IS_G2B_KEY = 'is_g2b'
IS_G2G_KEY = 'is_g2g'
FIRST_LIFE_EVENT_KEY = 'sub_category'
SECOND_LIFE_EVENT_KEY = 'second_sub_category'
SERVICE_ACTIONS_KEY = 'service_actions'
USEFUL_LINKS_KEY = 'useful_links'
# Tokens
CITIZENS_TOKEN = 'Πολίτες'
BUSINESSES_TOKEN = 'Επιχειρήσεις'
GOVERNMENT_TOKEN = 'Δημόσιους φορείς'
SOURCE_TOKEN = 'gov.gr'
TYPE_TOKEN = 'Εξωστρεφής'
TRIGGER_TOKEN = 'Αιτούμενη'
CURRENT_STATUS_TOKEN = 'Υπό επεξεργασία'
# Templates
PROCESS_TEMPLATE = 'process'
PROV_DIG_LOC_TEMPLATE = 'process_provision_digital_locations'
USEFUL_LINKS_TEMPLATE = 'process_useful_links'
# Fields
DESCRIPTION_FIELD = 'process_description'
PROVIDED_TO_FIELD = 'process_provided_to'
LIFE_EVENTS_FIELD = 'process_life_events'
SOURCE_FIELD = 'process_source'
TYPE_FIELD = 'process_type'
TRIGGER_FIELD = 'process_interval'
CURRENT_STATUS_FIELD = 'process_current_status'
PROVISION_DIGITAL_LOCATION_TITLE_FIELD = \
    'process_provision_digital_location_title'
PROVISION_DIGITAL_LOCATION_URL_FIELD = \
    'process_provision_digital_location_url'
PROVISION_DIGITAL_LOCATION_DESCRIPTION_FIELD = \
    'process_provision_digital_location_description'
USEFUL_LINK_TITLE_FIELD = 'process_useful_link_title'
USEFUL_LINK_URL_FIELD = 'process_useful_link_url'
# Files
GOVGR_SERVICES_JSON = 'govgr_services.json'
GOVGR_LIFE_EVENTS_JSON = 'govgr_subcategories.json'
GOVGR_USEFUL_LINKS_JSON = 'govgr_useful_links.json'
DIAVLOS_ADD_REQUESTS_PICKLE = 'govgr_services_diavlos_add_requests.pickle'
# Caches
GOVGR_LIFE_EVENTS = []
GOVGR_USEFUL_LINKS = []


def fetch_from_file(file):
    with open(file) as f:
        return json.load(f)


def fetch_from_url(url, raise_for_http_error=False):
    r = requests.get(url)
    try:
        r.raise_for_status()
    except requests.exceptions.HTTPError as e:
        if raise_for_http_error:
            raise
        logger.debug(e)
        return {}
    else:
        return r.json()


def fetch_govgr_services(from_api=False):
    if from_api:
        return fetch_from_url(GOVGR_SERVICES_ENDPOINT)
    services = fetch_from_file(GOVGR_SERVICES_JSON)
    return services


def fetch_life_event(id_, from_api=False):
    global GOVGR_LIFE_EVENTS
    if from_api:
        return fetch_from_url(GOVGR_LIFE_EVENTS_ENDPOINT + id_)
    if not GOVGR_LIFE_EVENTS:
        GOVGR_LIFE_EVENTS = fetch_from_file(GOVGR_LIFE_EVENTS_JSON)
    for life_event in GOVGR_LIFE_EVENTS:
        if id_ == life_event[ID_KEY]:
            return life_event


def fetch_useful_link(id_, from_api=False):
    global GOVGR_USEFUL_LINKS
    if from_api:
        return fetch_from_url(GOVGR_USEFUL_LINKS_ENDPOINT + id_)
    if not GOVGR_USEFUL_LINKS:
        GOVGR_USEFUL_LINKS = fetch_from_file(GOVGR_USEFUL_LINKS_JSON)
    for useful_link in GOVGR_USEFUL_LINKS:
        if id_ == useful_link[ID_KEY]:
            return useful_link


def add_request_dict(govgr_service_dict):
    request_dict = {}
    # Add title
    request_dict[NAME_KEY] = govgr_service_dict[TITLE_KEY]
    fields = request_dict[FIELDS_KEY] = {}
    # Add process template fields
    process_templates = fields[PROCESS_TEMPLATE] = [{}]
    process_template_instance = process_templates[0]
    # Add description
    if DESCRIPTION_KEY in govgr_service_dict:
        process_template_instance[DESCRIPTION_FIELD] = govgr_service_dict[
            DESCRIPTION_KEY]
    # Add g2{c,b,g}
    is_g2c = govgr_service_dict[IS_G2C_KEY]
    is_g2b = govgr_service_dict[IS_G2B_KEY]
    is_g2g = govgr_service_dict[IS_G2G_KEY]
    value = ''
    if is_g2c:
        value += f'{CITIZENS_TOKEN},'
    if is_g2b:
        value += f'{BUSINESSES_TOKEN},'
    if is_g2g:
        value += f'{GOVERNMENT_TOKEN}'
    process_template_instance[PROVIDED_TO_FIELD] = value.rstrip(',')
    # Add life events
    first_life_event_id = govgr_service_dict[FIRST_LIFE_EVENT_KEY]
    second_life_event_id = govgr_service_dict[SECOND_LIFE_EVENT_KEY]
    if first_life_event_id or second_life_event_id:
        value = ''
        if first_life_event_id:
            first_life_event = fetch_life_event(first_life_event_id)
            if first_life_event:
                value += first_life_event[TITLE_KEY]
        if second_life_event_id:
            second_life_event = fetch_life_event(second_life_event_id)
            if second_life_event:
                value += second_life_event[TITLE_KEY]
        if value:
            process_template_instance[LIFE_EVENTS_FIELD] = value.rstrip(',')
    # Add source
    process_template_instance[SOURCE_FIELD] = SOURCE_TOKEN
    # Add type
    process_template_instance[TYPE_FIELD] = TYPE_TOKEN
    # Add trigger
    process_template_instance[TRIGGER_FIELD] = TRIGGER_TOKEN
    # Add current status
    process_template_instance[CURRENT_STATUS_FIELD] = CURRENT_STATUS_TOKEN
    # Add process provision digital locations template fields
    service_actions = govgr_service_dict[SERVICE_ACTIONS_KEY]
    if service_actions:
        process_pdl_templates = fields[PROV_DIG_LOC_TEMPLATE] = []
        for service_action in service_actions:
            process_pdl_template_instance = {}
            if TITLE_KEY in service_action and service_action[TITLE_KEY]:
                process_pdl_template_instance[
                    PROVISION_DIGITAL_LOCATION_TITLE_FIELD] = service_action[
                    TITLE_KEY]
            if URL_KEY in service_action and service_action[URL_KEY]:
                process_pdl_template_instance[
                    PROVISION_DIGITAL_LOCATION_URL_FIELD] = service_action[
                    URL_KEY]
            if DESCRIPTION_KEY in service_action and service_action[
                    DESCRIPTION_KEY]:
                process_pdl_template_instance[
                    PROVISION_DIGITAL_LOCATION_DESCRIPTION_FIELD] = \
                    service_action[DESCRIPTION_KEY]
            if process_pdl_template_instance:
                process_pdl_templates.append(process_pdl_template_instance)
    # Add useful links template fields
    useful_links = govgr_service_dict[USEFUL_LINKS_KEY]
    if useful_links:
        process_ul_templates = fields[USEFUL_LINKS_TEMPLATE] = []
        for useful_link_id in useful_links:
            useful_link = fetch_useful_link(useful_link_id)
            if not useful_link:
                continue
            process_ul_template_instance = {}
            if TITLE_KEY in useful_link and useful_link[TITLE_KEY]:
                process_ul_template_instance[USEFUL_LINK_TITLE_FIELD] = \
                    useful_link[TITLE_KEY]
            if URL_KEY in useful_link and useful_link[URL_KEY]:
                process_ul_template_instance[USEFUL_LINK_URL_FIELD] = \
                    useful_link[URL_KEY]
            if process_ul_template_instance:
                process_ul_templates.append(process_ul_template_instance)
    return request_dict


def govgr_services_diavlos_add_requests(services):
    requests = []
    for i, service in enumerate(services):
        requests.append(add_request_dict(service))
        logger.debug(f'{i + 1}: {service[TITLE_KEY]} add request created.')
    return requests


def main():
    services = fetch_govgr_services()
    requests = govgr_services_diavlos_add_requests(services)
    logger.debug(f'Fetched {len(requests)} service requests.')
    # Pickle results
    with open(DIAVLOS_ADD_REQUESTS_PICKLE, 'wb') as f:
        pickle.dump(requests, f, protocol=pickle.HIGHEST_PROTOCOL)
    logger.debug(f'Pickled requests.')


if __name__ == '__main__':
    main()
